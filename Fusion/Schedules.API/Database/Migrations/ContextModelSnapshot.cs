// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Schedules.API.Database;

#nullable disable

namespace Schedules.API.Database.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Schedules.API.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a339325e-edba-4c64-9863-fb8a5d6eaea7"),
                            CategoryId = new Guid("402ab577-379f-4e42-86ea-9ecf2e454dd5"),
                            CreatedAt = new DateTime(2023, 11, 27, 14, 28, 12, 824, DateTimeKind.Utc).AddTicks(2620),
                            IsDeleted = false,
                            Note = "Sidearm u note / category #1",
                            Tenant = "Sidearmu",
                            Title = "The Sidearm Schedule #1"
                        },
                        new
                        {
                            Id = new Guid("3a7c06b5-d658-47d4-a9c4-c228435a3980"),
                            CategoryId = new Guid("402ab577-379f-4e42-86ea-9ecf2e454dd5"),
                            CreatedAt = new DateTime(2023, 11, 27, 14, 28, 12, 824, DateTimeKind.Utc).AddTicks(2660),
                            IsDeleted = false,
                            Note = "Oklahoma #1",
                            Tenant = "Oklahoma",
                            Title = "The Oklahoma Schedule #1"
                        },
                        new
                        {
                            Id = new Guid("b0356b8e-9fed-4df1-a94c-ae3b3c316d53"),
                            CategoryId = new Guid("be4cc0d7-029c-45b6-a121-726a53ccd21a"),
                            CreatedAt = new DateTime(2023, 11, 27, 14, 28, 12, 824, DateTimeKind.Utc).AddTicks(2660),
                            IsDeleted = false,
                            Note = "Oklahoma #2",
                            Tenant = "Oklahoma",
                            Title = "The Oklahoma Schedule #2"
                        },
                        new
                        {
                            Id = new Guid("b4b90521-c8dd-4a16-abab-ebf41efa60f7"),
                            CategoryId = new Guid("0fdc6594-102f-4f05-872b-6746b65bdee9"),
                            CreatedAt = new DateTime(2023, 11, 27, 14, 28, 12, 824, DateTimeKind.Utc).AddTicks(2670),
                            IsDeleted = false,
                            Note = "Oklahoma #3",
                            Tenant = "Oklahoma",
                            Title = "The Oklahoma Schedule #3"
                        },
                        new
                        {
                            Id = new Guid("d5015ad1-1ba7-4314-83d0-d223b394ee73"),
                            CategoryId = new Guid("0fdc6594-102f-4f05-872b-6746b65bdee9"),
                            CreatedAt = new DateTime(2023, 11, 27, 14, 28, 12, 824, DateTimeKind.Utc).AddTicks(2670),
                            IsDeleted = false,
                            Note = "Oklahoma #3-1",
                            Tenant = "Oklahoma",
                            Title = "The Oklahoma Schedule #3.1"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
